var app=function(){"use strict";function t(){}function e(t){return t()}function n(){return Object.create(null)}function s(t){t.forEach(e)}function c(t){return"function"==typeof t}function o(t,e){return t!=t?e==e:t!==e||t&&"object"==typeof t||"function"==typeof t}function r(t){t.parentNode&&t.parentNode.removeChild(t)}let i;function a(t){i=t}const l=[],d=[];let u=[];const f=[],p=Promise.resolve();let h=!1;function $(t){u.push(t)}const x=new Set;let m=0;function g(){if(0!==m)return;const t=i;do{try{for(;m<l.length;){const t=l[m];m++,a(t),b(t.$$)}}catch(t){throw l.length=0,m=0,t}for(a(null),l.length=0,m=0;d.length;)d.pop()();for(let t=0;t<u.length;t+=1){const e=u[t];x.has(e)||(x.add(e),e())}u.length=0}while(l.length);for(;f.length;)f.pop()();h=!1,x.clear(),a(t)}function b(t){if(null!==t.fragment){t.update(),s(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach($)}}const v=new Set;function y(t,e){const n=t.$$;null!==n.fragment&&(!function(t){const e=[],n=[];u.forEach((s=>-1===t.indexOf(s)?e.push(s):n.push(s))),n.forEach((t=>t())),u=e}(n.after_update),s(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function _(t,e){-1===t.$$.dirty[0]&&(l.push(t),h||(h=!0,p.then(g)),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function k(o,l,d,u,f,p,h,x=[-1]){const m=i;a(o);const b=o.$$={fragment:null,ctx:[],props:p,update:t,not_equal:f,bound:n(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(l.context||(m?m.$$.context:[])),callbacks:n(),dirty:x,skip_bound:!1,root:l.target||m.$$.root};h&&h(b.root);let y=!1;if(b.ctx=d?d(o,l.props||{},((t,e,...n)=>{const s=n.length?n[0]:e;return b.ctx&&f(b.ctx[t],b.ctx[t]=s)&&(!b.skip_bound&&b.bound[t]&&b.bound[t](s),y&&_(o,t)),e})):[],b.update(),y=!0,s(b.before_update),b.fragment=!!u&&u(b.ctx),l.target){if(l.hydrate){const t=function(t){return Array.from(t.childNodes)}(l.target);b.fragment&&b.fragment.l(t),t.forEach(r)}else b.fragment&&b.fragment.c();l.intro&&((k=o.$$.fragment)&&k.i&&(v.delete(k),k.i(w))),function(t,n,o,r){const{fragment:i,after_update:a}=t.$$;i&&i.m(n,o),r||$((()=>{const n=t.$$.on_mount.map(e).filter(c);t.$$.on_destroy?t.$$.on_destroy.push(...n):s(n),t.$$.on_mount=[]})),a.forEach($)}(o,l.target,l.anchor,l.customElement),g()}var k,w;a(m)}class w{$destroy(){y(this,1),this.$destroy=t}$on(e,n){if(!c(n))return t;const s=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return s.push(n),()=>{const t=s.indexOf(n);-1!==t&&s.splice(t,1)}}$set(t){var e;this.$$set&&(e=t,0!==Object.keys(e).length)&&(this.$$.skip_bound=!0,this.$$set(t),this.$$.skip_bound=!1)}}function E(e){let n;return{c(){var t,e,s,c;t="body",n=document.createElement(t),n.innerHTML='<div class="container justifyit maxit svelte-t1cdxi"><h1 class="svelte-t1cdxi">Hello, Misile</h1></div> \n\t<div class="container column-flex maxit svelte-t1cdxi"><h1 class="nottitle svelte-t1cdxi">My purpose</h1> \n\t\t<p class="desc svelte-t1cdxi">- Make and use new things quickly</p> \n\t\t<p class="desc svelte-t1cdxi">- Make open source programs and libraries</p> \n\t\t<p class="desc svelte-t1cdxi">- No unmaintained libraries</p> \n\t\t<p class="desc svelte-t1cdxi">- Making what i want</p> \n\t\t<h1 class="nottitle svelte-t1cdxi">My OS</h1> \n\t\t<p class="desc svelte-t1cdxi">- Windows Canary channel</p> \n\t\t<p class="desc svelte-t1cdxi">- Arch based Linux</p> \n\t\t<p class="desc svelte-t1cdxi">-   use arch btw</p> \n\t\t<p class="desc svelte-t1cdxi">-   EndeavourOS xfce</p> \n\t\t<p class="desc svelte-t1cdxi">- Bedrock Linux based on Ubuntu LTS</p> \n\t\t<p class="desc svelte-t1cdxi">- Proxmox OS (Debian Based)</p> \n\t\t<p class="desc svelte-t1cdxi">-   Bedrock Linux based on Slackware Linux</p></div>',e=n,s="class",null==(c="svelte-t1cdxi")?e.removeAttribute(s):e.getAttribute(s)!==c&&e.setAttribute(s,c)},m(t,e){!function(t,e,n){t.insertBefore(e,n||null)}(t,n,e)},p:t,i:t,o:t,d(t){t&&r(n)}}}return new class extends w{constructor(t){super(),k(this,t,null,E,o,{})}}({target:document.body})}();
//# sourceMappingURL=bundle.js.map
